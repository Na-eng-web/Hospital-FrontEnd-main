/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management System API
 * API for managing hospitals and patients
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Hospital
 */
export interface Hospital {
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof Hospital
     */
    'phone'?: number;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    'hospitalId'?: string;
}
/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    'phone'?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'hospitalId'?: string;
}

/**
 * HospitalApi - axios parameter creator
 * @export
 */
export const HospitalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new hospital
         * @param {Hospital} [hospital] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addHospitalPost: async (hospital?: Hospital, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/addHospital`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hospital, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all hospitals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hospitalGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hospital`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HospitalApi - functional programming interface
 * @export
 */
export const HospitalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HospitalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new hospital
         * @param {Hospital} [hospital] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addHospitalPost(hospital?: Hospital, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hospital>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addHospitalPost(hospital, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HospitalApi.addHospitalPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all hospitals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hospitalGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hospital>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hospitalGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HospitalApi.hospitalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HospitalApi - factory interface
 * @export
 */
export const HospitalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HospitalApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new hospital
         * @param {Hospital} [hospital] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addHospitalPost(hospital?: Hospital, options?: any): AxiosPromise<Hospital> {
            return localVarFp.addHospitalPost(hospital, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all hospitals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hospitalGet(options?: any): AxiosPromise<Array<Hospital>> {
            return localVarFp.hospitalGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HospitalApi - object-oriented interface
 * @export
 * @class HospitalApi
 * @extends {BaseAPI}
 */
export class HospitalApi extends BaseAPI {
    /**
     * 
     * @summary Add a new hospital
     * @param {Hospital} [hospital] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalApi
     */
    public addHospitalPost(hospital?: Hospital, options?: RawAxiosRequestConfig) {
        return HospitalApiFp(this.configuration).addHospitalPost(hospital, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all hospitals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalApi
     */
    public hospitalGet(options?: RawAxiosRequestConfig) {
        return HospitalApiFp(this.configuration).hospitalGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PatientApi - axios parameter creator
 * @export
 */
export const PatientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new patient
         * @param {Patient} [patient] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPatientPost: async (patient?: Patient, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/addPatient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patient, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all patients for a hospital
         * @param {string} id ID of the hospital to fetch patients for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hospitalPatientGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('hospitalPatientGet', 'id', id)
            const localVarPath = `/hospital/patient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientApi - functional programming interface
 * @export
 */
export const PatientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new patient
         * @param {Patient} [patient] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPatientPost(patient?: Patient, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPatientPost(patient, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientApi.addPatientPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all patients for a hospital
         * @param {string} id ID of the hospital to fetch patients for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hospitalPatientGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Patient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hospitalPatientGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientApi.hospitalPatientGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientApi - factory interface
 * @export
 */
export const PatientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new patient
         * @param {Patient} [patient] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPatientPost(patient?: Patient, options?: any): AxiosPromise<Patient> {
            return localVarFp.addPatientPost(patient, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all patients for a hospital
         * @param {string} id ID of the hospital to fetch patients for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hospitalPatientGet(id: string, options?: any): AxiosPromise<Array<Patient>> {
            return localVarFp.hospitalPatientGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientApi - object-oriented interface
 * @export
 * @class PatientApi
 * @extends {BaseAPI}
 */
export class PatientApi extends BaseAPI {
    /**
     * 
     * @summary Add a new patient
     * @param {Patient} [patient] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public addPatientPost(patient?: Patient, options?: RawAxiosRequestConfig) {
        return PatientApiFp(this.configuration).addPatientPost(patient, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all patients for a hospital
     * @param {string} id ID of the hospital to fetch patients for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public hospitalPatientGet(id: string, options?: RawAxiosRequestConfig) {
        return PatientApiFp(this.configuration).hospitalPatientGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



